# 워크플로 이름
name: CI/CD

# 어떤 이벤트에 반응할지 설정
on:
  push:
    branches:
      - main      # main에 push될 때 (배포 전 최종 테스트)
      - dev       # dev에 push될 때 (통합 테스트)
  pull_request:
    branches:
      - dev       # feat/* 브랜치 → dev PR 생성 시 테스트 트리거

# 실제 실행될 작업 정의
jobs:
  build:
    runs-on: ubuntu-latest            # GitHub Actions에서 사용할 가상 환경

    services:
      postgres:                      # PostgreSQL 서비스 설정
        image: postgres:16           # 최신 PostgreSQL 이미지 사용
        ports:
          - 5432:5432                 # 포트 매핑
        env:
          POSTGRES_DB: trigger_db_cbv2     # 데이터베이스 이름
          POSTGRES_USER: trigger_user  # 사용자 이름
          POSTGRES_PASSWORD: testpass  # 비밀번호
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/trigger_db_cbv2
      SPRING_DATASOURCE_USERNAME: trigger_user
      SPRING_DATASOURCE_PASSWORD: testpass

    steps:
      - name: Checkout code           # GitHub 리포지토리에서 소스코드를 가져옴
        uses: actions/checkout@v4

      - name: Set up JDK 17           # Java 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'     # OpenJDK 배포판
          java-version: '17'

      - name: Grant execute permission for gradlew   # gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Build with Gradle without test         # 테스트 생략 빌드 (개발 중 빠른 피드백용)
        run: ./gradlew build -x test --no-daemon

      - name: Run Tests                              # 테스트 실행 (이후 단계에서 조건 분기 가능)
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew test --no-daemon

      - name: Deploy to Render                     # Render에 배포
        if: github.ref == 'refs/heads/main'  # main 브랜치에 푸시된 경우에만 실행
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}